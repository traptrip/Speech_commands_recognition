# #################################
# Basic training parameters for speaker-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Mirco Ravanelli 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# Pretrain folder (HuggingFace)
pretrained_path: speechbrain/google_speech_command_xvector

# Feature parameters
n_mels: 24

# Output parameters
out_n_neurons: 10

# Model params
compute_features: !new:speechbrain.lobes.features.Fbank
  n_mels: !ref <n_mels>

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
  std_norm: False

embedding_model: !new:speechbrain.lobes.models.Xvector.Xvector
  in_channels: !ref <n_mels>
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [512, 512, 512, 512, 1500]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 512

classifier: !new:speechbrain.lobes.models.Xvector.Classifier
  input_shape: [null, null, 512]
  activation: !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_neurons: 512
  out_neurons: !ref <out_n_neurons>

mean_var_norm_emb: !new:speechbrain.processing.features.InputNormalization
  norm_type: global
  std_norm: False

label_encoder: !new:speechbrain.dataio.encoder.CategoricalEncoder

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  loadables:
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    label_encoder: !ref <label_encoder>
  paths:
    embedding_model: !ref <pretrained_path>/embedding_model.ckpt
    classifier: !ref <pretrained_path>/classifier.ckpt
    label_encoder: !ref <pretrained_path>/label_encoder.txt

###################################################################################################################################
##############################################################################################################################
##############################################################################################################################
#########################################################################################################################

# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: /home/and/projects/hacks/tv-neuro-tech-speech-rec/data
output_folder: !ref ./results/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
tb_logs: !ref <output_folder>/train/tb_logs_<seed>

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: train.json
valid_annotation: valid.json
test_annotation: test.json

# The train logger writes training statistics to a file, as well as stdout.
# train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
#   save_file: !ref <train_log>
train_logger: !new:speechbrain.utils.train_logger.TensorboardLogger
  save_dir: !ref <tb_logs>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

ckpt_interval_minutes: 2 # save checkpoint every N min

# Training Parameters
sample_rate: 16000
number_of_epochs: 30
batch_size: 128
lr_start: 0.0005
lr_final: 0.000005
dataloader_options:
  batch_size: !ref <batch_size>

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: !ref <data_folder>/noises
  babble_prob: 0.0
  reverb_prob: 0.0
  noise_prob: 1.0
  noise_snr_low: 0
  noise_snr_high: 15

# Adds speech change + time and frequency dropouts (time-domain implementation)
# A small speed change help to improve the performance of speaker-id as well.
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
  sample_rate: !ref <sample_rate>
  speeds: [95, 100, 105]

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: !ref <compute_features>
  mean_var_norm: !ref <mean_var_norm>
  embedding_model: !ref <embedding_model>
  classifier: !ref <classifier>
  env_corrupt: !ref <env_corrupt>
  augmentation: !ref <augmentation>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
  lr: !ref <lr_start>

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: !ref <lr_start>
  final_value: !ref <lr_final>
  epoch_count: !ref <number_of_epochs>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>
    label_encoder: !ref <label_encoder>
    counter: !ref <epoch_counter>
